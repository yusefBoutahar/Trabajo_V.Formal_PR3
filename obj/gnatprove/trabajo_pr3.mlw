(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "str" defined at trabajo_pr3.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Trabajo_pr3__space_counter__str
 use import "_gnatprove_standard".Main
 use        Standard__string

 function str #"trabajo_pr3.ads" 5 0 0#"model_projected" "model_trace:2740" "name:Str" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "str" defined at trabajo_pr3.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__space_counter__str___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T10s" defined at trabajo_pr3.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__space_counter__L9s__T10s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content "model_trace:" "name:" : t10s }
 
 function t10s__ref___projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref___projection
 
 meta "inline : no" function t10s__ref___projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12s" defined at trabajo_pr3.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__space_counter__L11s__T12s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t12s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t12s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12s__ref =
  { mutable t12s__content "model_trace:" "name:" : t12s }
 
 function t12s__ref___projection 
   (a : t12s__ref) : t12s =
  a.t12s__content
 
 meta "model_projection" function t12s__ref___projection
 
 meta "inline : no" function t12s__ref___projection
 
 val t12s__havoc 
   (x : t12s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "space_counter" defined at trabajo_pr3.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Trabajo_pr3__space_counter
 use import "_gnatprove_standard".Main
 use        Standard__string

 function space_counter 
   (str : Standard__string.string) : int
 
 predicate space_counter__function_guard 
   (result : int) (str : Standard__string.string) 

end

(* Module for defining the constant "str" defined at trabajo_pr3.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Trabajo_pr3__upper_case_counter__str
 use import "_gnatprove_standard".Main
 use        Standard__string

 function str #"trabajo_pr3.ads" 20 0 0#"model_projected" "name:Str" "model_trace:2816" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "str" defined at trabajo_pr3.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__upper_case_counter__str___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T14s" defined at trabajo_pr3.ads:28, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__upper_case_counter__L13s__T14s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14s__ref =
  { mutable t14s__content "model_trace:" "name:" : t14s }
 
 function t14s__ref___projection 
   (a : t14s__ref) : t14s =
  a.t14s__content
 
 meta "model_projection" function t14s__ref___projection
 
 meta "inline : no" function t14s__ref___projection
 
 val t14s__havoc 
   (x : t14s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T16s" defined at trabajo_pr3.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__upper_case_counter__L15s__T16s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t16s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t16s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16s__ref =
  { mutable t16s__content "model_trace:" "name:" : t16s }
 
 function t16s__ref___projection 
   (a : t16s__ref) : t16s =
  a.t16s__content
 
 meta "model_projection" function t16s__ref___projection
 
 meta "inline : no" function t16s__ref___projection
 
 val t16s__havoc 
   (x : t16s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "upper_case_counter" defined at trabajo_pr3.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Trabajo_pr3__upper_case_counter
 use import "_gnatprove_standard".Main
 use        Standard__string

 function upper_case_counter 
   (str : Standard__string.string) : int
 
 predicate upper_case_counter__function_guard 
   (result : int) (str : Standard__string.string) 

end

(* Module for defining the constant "str" defined at trabajo_pr3.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Trabajo_pr3__lower_case_counter__str
 use import "_gnatprove_standard".Main
 use        Standard__string

 function str #"trabajo_pr3.ads" 36 0 0#"model_projected" "name:Str" "model_trace:2904" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "str" defined at trabajo_pr3.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__lower_case_counter__str___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T18s" defined at trabajo_pr3.ads:47, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__lower_case_counter__L17s__T18s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t18s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t18s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18s__ref =
  { mutable t18s__content "model_trace:" "name:" : t18s }
 
 function t18s__ref___projection 
   (a : t18s__ref) : t18s =
  a.t18s__content
 
 meta "model_projection" function t18s__ref___projection
 
 meta "inline : no" function t18s__ref___projection
 
 val t18s__havoc 
   (x : t18s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T20s" defined at trabajo_pr3.ads:50, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__lower_case_counter__L19s__T20s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t20s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t20s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t20s__ref =
  { mutable t20s__content "model_trace:" "name:" : t20s }
 
 function t20s__ref___projection 
   (a : t20s__ref) : t20s =
  a.t20s__content
 
 meta "model_projection" function t20s__ref___projection
 
 meta "inline : no" function t20s__ref___projection
 
 val t20s__havoc 
   (x : t20s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "lower_case_counter" defined at trabajo_pr3.ads:36, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Trabajo_pr3__lower_case_counter
 use import "_gnatprove_standard".Main
 use        Standard__string

 function lower_case_counter 
   (str : Standard__string.string) : int
 
 predicate lower_case_counter__function_guard 
   (result : int) (str : Standard__string.string) 

end

(* Module for defining the constant "str" defined at trabajo_pr3.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module Trabajo_pr3__string_c_counter__str
 use import "_gnatprove_standard".Main
 use        Standard__string

 function str #"trabajo_pr3.ads" 55 0 0#"model_projected" "name:Str" "model_trace:3015" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "str" defined at trabajo_pr3.ads:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__string_c_counter__str___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T22s" defined at trabajo_pr3.ads:60, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__string_c_counter__L21s__T22s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t22s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t22s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t22s__ref =
  { mutable t22s__content "model_trace:" "name:" : t22s }
 
 function t22s__ref___projection 
   (a : t22s__ref) : t22s =
  a.t22s__content
 
 meta "model_projection" function t22s__ref___projection
 
 meta "inline : no" function t22s__ref___projection
 
 val t22s__havoc 
   (x : t22s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T24s" defined at trabajo_pr3.ads:65, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__string_c_counter__L23s__T24s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t24s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t24s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t24s__ref =
  { mutable t24s__content "model_trace:" "name:" : t24s }
 
 function t24s__ref___projection 
   (a : t24s__ref) : t24s =
  a.t24s__content
 
 meta "model_projection" function t24s__ref___projection
 
 meta "inline : no" function t24s__ref___projection
 
 val t24s__havoc 
   (x : t24s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T26s" defined at trabajo_pr3.ads:68, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__string_c_counter__L25s__T26s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t26s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t26s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t26s__ref =
  { mutable t26s__content "model_trace:" "name:" : t26s }
 
 function t26s__ref___projection 
   (a : t26s__ref) : t26s =
  a.t26s__content
 
 meta "model_projection" function t26s__ref___projection
 
 meta "inline : no" function t26s__ref___projection
 
 val t26s__havoc 
   (x : t26s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "string_c_counter" defined at trabajo_pr3.ads:55, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Trabajo_pr3__string_c_counter
 use import "_gnatprove_standard".Main
 use        Standard__string

 function string_c_counter 
   (str : Standard__string.string) : int
 
 predicate string_c_counter__function_guard 
   (result : int) (str : Standard__string.string) 

end

(* Module for axiomatizing type "TS1bP1" defined at trabajo_pr3.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__space_counter__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content "model_trace:" "name:" : tS1bP1 }
 
 function tS1bP1__ref___projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at trabajo_pr3.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__space_counter__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Trabajo_pr3__space_counter__TS1bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Trabajo_pr3__space_counter__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref =
  { mutable s1b__content "model_trace:" "name:" : s1b }
 
 function s1b__ref___projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at trabajo_pr3.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__space_counter__L_1__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content "model_trace:" "name:" : t2b }
 
 function t2b__ref___projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref___projection
 
 meta "inline : no" function t2b__ref___projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS4bP1" defined at trabajo_pr3.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__upper_case_counter__TS4bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS4bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS4bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS4bP1__ref =
  { mutable tS4bP1__content "model_trace:" "name:" : tS4bP1 }
 
 function tS4bP1__ref___projection 
   (a : tS4bP1__ref) : tS4bP1 =
  a.tS4bP1__content
 
 meta "model_projection" function tS4bP1__ref___projection
 
 meta "inline : no" function tS4bP1__ref___projection
 
 val tS4bP1__havoc 
   (x : tS4bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S4b" defined at trabajo_pr3.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__upper_case_counter__S4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Trabajo_pr3__upper_case_counter__TS4bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Trabajo_pr3__upper_case_counter__TS4bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s4b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s4b__ref =
  { mutable s4b__content "model_trace:" "name:" : s4b }
 
 function s4b__ref___projection 
   (a : s4b__ref) : s4b =
  a.s4b__content
 
 meta "model_projection" function s4b__ref___projection
 
 meta "inline : no" function s4b__ref___projection
 
 val s4b__havoc 
   (x : s4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at trabajo_pr3.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__upper_case_counter__L_2__T6b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t6b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t6b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6b__ref =
  { mutable t6b__content "model_trace:" "name:" : t6b }
 
 function t6b__ref___projection 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref___projection
 
 meta "inline : no" function t6b__ref___projection
 
 val t6b__havoc 
   (x : t6b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS8bP1" defined at trabajo_pr3.adb:41, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__lower_case_counter__TS8bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS8bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS8bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS8bP1__ref =
  { mutable tS8bP1__content "model_trace:" "name:" : tS8bP1 }
 
 function tS8bP1__ref___projection 
   (a : tS8bP1__ref) : tS8bP1 =
  a.tS8bP1__content
 
 meta "model_projection" function tS8bP1__ref___projection
 
 meta "inline : no" function tS8bP1__ref___projection
 
 val tS8bP1__havoc 
   (x : tS8bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S8b" defined at trabajo_pr3.adb:41, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__lower_case_counter__S8b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Trabajo_pr3__lower_case_counter__TS8bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Trabajo_pr3__lower_case_counter__TS8bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s8b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s8b__ref =
  { mutable s8b__content "model_trace:" "name:" : s8b }
 
 function s8b__ref___projection 
   (a : s8b__ref) : s8b =
  a.s8b__content
 
 meta "model_projection" function s8b__ref___projection
 
 meta "inline : no" function s8b__ref___projection
 
 val s8b__havoc 
   (x : s8b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS11bP1" defined at trabajo_pr3.adb:67, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__string_c_counter__TS11bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS11bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS11bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS11bP1__ref =
  { mutable tS11bP1__content "model_trace:" "name:" : tS11bP1 }
 
 function tS11bP1__ref___projection 
   (a : tS11bP1__ref) : tS11bP1 =
  a.tS11bP1__content
 
 meta "model_projection" function tS11bP1__ref___projection
 
 meta "inline : no" function tS11bP1__ref___projection
 
 val tS11bP1__havoc 
   (x : tS11bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S11b" defined at trabajo_pr3.adb:67, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__string_c_counter__S11b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Trabajo_pr3__string_c_counter__TS11bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Trabajo_pr3__string_c_counter__TS11bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s11b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s11b__ref =
  { mutable s11b__content "model_trace:" "name:" : s11b }
 
 function s11b__ref___projection 
   (a : s11b__ref) : s11b =
  a.s11b__content
 
 meta "model_projection" function s11b__ref___projection
 
 meta "inline : no" function s11b__ref___projection
 
 val s11b__havoc 
   (x : s11b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12b" defined at trabajo_pr3.adb:73, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__string_c_counter__L_4__T12b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t12b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t12b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12b__ref =
  { mutable t12b__content "model_trace:" "name:" : t12b }
 
 function t12b__ref___projection 
   (a : t12b__ref) : t12b =
  a.t12b__content
 
 meta "model_projection" function t12b__ref___projection
 
 meta "inline : no" function t12b__ref___projection
 
 val t12b__havoc 
   (x : t12b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T17b" defined at trabajo_pr3.adb:79, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__string_c_counter__L_4__L16b__T17b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t17b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t17b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t17b__ref =
  { mutable t17b__content "model_trace:" "name:" : t17b }
 
 function t17b__ref___projection 
   (a : t17b__ref) : t17b =
  a.t17b__content
 
 meta "model_projection" function t17b__ref___projection
 
 meta "inline : no" function t17b__ref___projection
 
 val t17b__havoc 
   (x : t17b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T15b" defined at trabajo_pr3.adb:79, created in Gnat2Why.Types.Translate_Type *)
module Trabajo_pr3__string_c_counter__L_4__L14b__T15b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t15b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t15b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t15b__ref =
  { mutable t15b__content "model_trace:" "name:" : t15b }
 
 function t15b__ref___projection 
   (a : t15b__ref) : t15b =
  a.t15b__content
 
 meta "model_projection" function t15b__ref___projection
 
 meta "inline : no" function t15b__ref___projection
 
 val t15b__havoc 
   (x : t15b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "result" defined at trabajo_pr3.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Trabajo_pr3__space_counter__result
 use import "_gnatprove_standard".Main

 val result__ #"trabajo_pr3.adb" 6 0 0#"model_projected" "model_trace:2327" "name:result"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at trabajo_pr3.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__space_counter__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at trabajo_pr3.adb:11, created in Gnat2Why.Decls.Translate_Variable *)
module Trabajo_pr3__space_counter__L_1__i
 use import "_gnatprove_standard".Main

 val i #"trabajo_pr3.adb" 11 0 0#"model_projected" "model_trace:2340" "name:i"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at trabajo_pr3.adb:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__space_counter__L_1__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at trabajo_pr3.adb:25, created in Gnat2Why.Decls.Translate_Variable *)
module Trabajo_pr3__upper_case_counter__result
 use import "_gnatprove_standard".Main

 val result__ #"trabajo_pr3.adb" 25 0 0#"model_projected" "name:result" "model_trace:2393"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at trabajo_pr3.adb:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__upper_case_counter__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at trabajo_pr3.adb:30, created in Gnat2Why.Decls.Translate_Variable *)
module Trabajo_pr3__upper_case_counter__L_2__i
 use import "_gnatprove_standard".Main

 val i #"trabajo_pr3.adb" 30 0 0#"model_projected" "name:i" "model_trace:2414"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at trabajo_pr3.adb:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__upper_case_counter__L_2__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at trabajo_pr3.adb:44, created in Gnat2Why.Decls.Translate_Variable *)
module Trabajo_pr3__lower_case_counter__result
 use import "_gnatprove_standard".Main

 val result__ #"trabajo_pr3.adb" 44 0 0#"model_projected" "name:result" "model_trace:2479"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at trabajo_pr3.adb:44, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__lower_case_counter__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at trabajo_pr3.adb:45, created in Gnat2Why.Decls.Translate_Variable *)
module Trabajo_pr3__lower_case_counter__i
 use import "_gnatprove_standard".Main

 val i #"trabajo_pr3.adb" 45 0 0#"model_projected" "name:i" "model_trace:2489"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at trabajo_pr3.adb:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__lower_case_counter__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at trabajo_pr3.adb:71, created in Gnat2Why.Decls.Translate_Variable *)
module Trabajo_pr3__string_c_counter__result
 use import "_gnatprove_standard".Main

 val result__ #"trabajo_pr3.adb" 71 0 0#"model_projected" "name:result" "model_trace:2609"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at trabajo_pr3.adb:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__string_c_counter__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at trabajo_pr3.adb:73, created in Gnat2Why.Decls.Translate_Variable *)
module Trabajo_pr3__string_c_counter__L_4__i
 use import "_gnatprove_standard".Main

 val i #"trabajo_pr3.adb" 73 0 0#"model_projected" "name:i" "model_trace:2622"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at trabajo_pr3.adb:73, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__string_c_counter__L_4__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining the loop exit exception for the loop "L_1" defined at trabajo_pr3.adb:11, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Trabajo_pr3__space_counter__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at trabajo_pr3.adb:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__space_counter__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at trabajo_pr3.adb:30, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Trabajo_pr3__upper_case_counter__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at trabajo_pr3.adb:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__upper_case_counter__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at trabajo_pr3.adb:51, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Trabajo_pr3__lower_case_counter__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at trabajo_pr3.adb:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__lower_case_counter__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_4" defined at trabajo_pr3.adb:73, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Trabajo_pr3__string_c_counter__L_4
 use import "_gnatprove_standard".Main

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at trabajo_pr3.adb:73, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Trabajo_pr3__string_c_counter__L_4___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T10s" defined at trabajo_pr3.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__space_counter__L9s__T10s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T12s" defined at trabajo_pr3.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__space_counter__L11s__T12s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14s" defined at trabajo_pr3.ads:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__upper_case_counter__L13s__T14s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T16s" defined at trabajo_pr3.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__upper_case_counter__L15s__T16s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T18s" defined at trabajo_pr3.ads:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__lower_case_counter__L17s__T18s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T20s" defined at trabajo_pr3.ads:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__lower_case_counter__L19s__T20s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T22s" defined at trabajo_pr3.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__string_c_counter__L21s__T22s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T24s" defined at trabajo_pr3.ads:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__string_c_counter__L23s__T24s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T26s" defined at trabajo_pr3.ads:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__string_c_counter__L25s__T26s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS1bP1" defined at trabajo_pr3.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__space_counter__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at trabajo_pr3.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__space_counter__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Trabajo_pr3__space_counter__str
 use        Trabajo_pr3__space_counter__S1b

 predicate dynamic_invariant "inline" 
   (temp___expr_166 : Trabajo_pr3__space_counter__S1b.s1b) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool)  =
  (if (temp___skip_constant_163) then (
   true) else (
   ( (Trabajo_pr3__space_counter__S1b.dynamic_property (Standard__string.first Trabajo_pr3__space_counter__str.str) (Standard__string.last Trabajo_pr3__space_counter__str.str) (Trabajo_pr3__space_counter__S1b.first temp___expr_166) (Trabajo_pr3__space_counter__S1b.last temp___expr_166)) /\ ( ((Trabajo_pr3__space_counter__S1b.first temp___expr_166) = (Standard__string.first Trabajo_pr3__space_counter__str.str)) /\ ((Trabajo_pr3__space_counter__S1b.last temp___expr_166) = (Standard__string.last Trabajo_pr3__space_counter__str.str)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_168 : Trabajo_pr3__space_counter__S1b.s1b) (temp___skip_top_level_169 : bool)  =
  true

end

(* Module giving axioms for type "T2b" defined at trabajo_pr3.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__space_counter__L_1__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS4bP1" defined at trabajo_pr3.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__upper_case_counter__TS4bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S4b" defined at trabajo_pr3.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__upper_case_counter__S4b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Trabajo_pr3__upper_case_counter__str
 use        Trabajo_pr3__upper_case_counter__S4b

 predicate dynamic_invariant "inline" 
   (temp___expr_176 : Trabajo_pr3__upper_case_counter__S4b.s4b) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool)  =
  (if (temp___skip_constant_173) then (
   true) else (
   ( (Trabajo_pr3__upper_case_counter__S4b.dynamic_property (Standard__string.first Trabajo_pr3__upper_case_counter__str.str) (Standard__string.last Trabajo_pr3__upper_case_counter__str.str) (Trabajo_pr3__upper_case_counter__S4b.first temp___expr_176) (Trabajo_pr3__upper_case_counter__S4b.last temp___expr_176)) /\ ( ((Trabajo_pr3__upper_case_counter__S4b.first temp___expr_176) = (Standard__string.first Trabajo_pr3__upper_case_counter__str.str)) /\ ((Trabajo_pr3__upper_case_counter__S4b.last temp___expr_176) = (Standard__string.last Trabajo_pr3__upper_case_counter__str.str)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_178 : Trabajo_pr3__upper_case_counter__S4b.s4b) (temp___skip_top_level_179 : bool)  =
  true

end

(* Module giving axioms for type "T6b" defined at trabajo_pr3.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__upper_case_counter__L_2__T6b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS8bP1" defined at trabajo_pr3.adb:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__lower_case_counter__TS8bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S8b" defined at trabajo_pr3.adb:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__lower_case_counter__S8b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Trabajo_pr3__lower_case_counter__str
 use        Trabajo_pr3__lower_case_counter__S8b

 predicate dynamic_invariant "inline" 
   (temp___expr_186 : Trabajo_pr3__lower_case_counter__S8b.s8b) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool)  =
  (if (temp___skip_constant_183) then (
   true) else (
   ( (Trabajo_pr3__lower_case_counter__S8b.dynamic_property (Standard__string.first Trabajo_pr3__lower_case_counter__str.str) (Standard__string.last Trabajo_pr3__lower_case_counter__str.str) (Trabajo_pr3__lower_case_counter__S8b.first temp___expr_186) (Trabajo_pr3__lower_case_counter__S8b.last temp___expr_186)) /\ ( ((Trabajo_pr3__lower_case_counter__S8b.first temp___expr_186) = (Standard__string.first Trabajo_pr3__lower_case_counter__str.str)) /\ ((Trabajo_pr3__lower_case_counter__S8b.last temp___expr_186) = (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_188 : Trabajo_pr3__lower_case_counter__S8b.s8b) (temp___skip_top_level_189 : bool)  =
  true

end

(* Module giving axioms for type "TS11bP1" defined at trabajo_pr3.adb:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__string_c_counter__TS11bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S11b" defined at trabajo_pr3.adb:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__string_c_counter__S11b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Trabajo_pr3__string_c_counter__str
 use        Trabajo_pr3__string_c_counter__S11b

 predicate dynamic_invariant "inline" 
   (temp___expr_196 : Trabajo_pr3__string_c_counter__S11b.s11b) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool)  =
  (if (temp___skip_constant_193) then (
   true) else (
   ( (Trabajo_pr3__string_c_counter__S11b.dynamic_property (Standard__string.first Trabajo_pr3__string_c_counter__str.str) (Standard__string.last Trabajo_pr3__string_c_counter__str.str) (Trabajo_pr3__string_c_counter__S11b.first temp___expr_196) (Trabajo_pr3__string_c_counter__S11b.last temp___expr_196)) /\ ( ((Trabajo_pr3__string_c_counter__S11b.first temp___expr_196) = (Standard__string.first Trabajo_pr3__string_c_counter__str.str)) /\ ((Trabajo_pr3__string_c_counter__S11b.last temp___expr_196) = (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_198 : Trabajo_pr3__string_c_counter__S11b.s11b) (temp___skip_top_level_199 : bool)  =
  true

end

(* Module giving axioms for type "T12b" defined at trabajo_pr3.adb:73, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__string_c_counter__L_4__T12b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T17b" defined at trabajo_pr3.adb:79, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__string_c_counter__L_4__L16b__T17b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T15b" defined at trabajo_pr3.adb:79, created in Gnat2Why.Types.Generate_Type_Completion *)
module Trabajo_pr3__string_c_counter__L_4__L14b__T15b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for declaring a program function (and possibly an axiom) for "space_counter" defined at trabajo_pr3.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Trabajo_pr3__space_counter___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__integer___axiom
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Trabajo_pr3__space_counter
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val space_counter 
   (str : Standard__string.string) : int
  requires {  true }
  ensures {  ( ( (result = (Trabajo_pr3__space_counter.space_counter str)) /\ (Trabajo_pr3__space_counter.space_counter__function_guard result str) ) /\ ( (Standard__integer___axiom.dynamic_invariant result True False True True) /\ ( (if (((Standard__string.length str) = 0)) then (
   (result = 0)) else (
   true)) \/ (if ((result = 0)) then (
   (forall i   "model" "name:i" "model_trace:2777"  : int.
    ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) <> 32) ))) else (
   (exists i  : int.
    ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) = 32) )))) ) ) ) }
 
 axiom space_counter__post_axiom :
  (forall str   : Standard__string.string [(Trabajo_pr3__space_counter.space_counter str)].
   ( (Standard__string___axiom.dynamic_invariant str True True True True) -> (let result = (Trabajo_pr3__space_counter.space_counter str) in (
    (if ((Trabajo_pr3__space_counter.space_counter__function_guard result str)) then (
     ( ( ( (if (((Standard__string.length str) = 0)) then (
      (result = 0)) else (
      true)) \/ (if ((result = 0)) then (
      (forall i   "model" "name:i" "model_trace:2777"  : int.
       ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) <> 32) ))) else (
      (exists i  : int.
       ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) = 32) )))) ) /\ (Standard__integer___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "upper_case_counter" defined at trabajo_pr3.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Trabajo_pr3__upper_case_counter___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__integer___axiom
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Trabajo_pr3__upper_case_counter
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val upper_case_counter 
   (str : Standard__string.string) : int
  requires {  true }
  ensures {  ( ( (result = (Trabajo_pr3__upper_case_counter.upper_case_counter str)) /\ (Trabajo_pr3__upper_case_counter.upper_case_counter__function_guard result str) ) /\ ( (Standard__integer___axiom.dynamic_invariant result True False True True) /\ ( (if (((Standard__string.length str) = 0)) then (
   (result = 0)) else (
   true)) \/ (if ((result = 0)) then (
   (forall i   "model" "name:i" "model_trace:2853"  : int.
    ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) < 65) \/ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) > 90) ) ))) else (
   (exists i  : int.
    ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) /\ ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) >= 65) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) <= 90) ) )))) ) ) ) }
 
 axiom upper_case_counter__post_axiom :
  (forall str   : Standard__string.string [(Trabajo_pr3__upper_case_counter.upper_case_counter str)].
   ( (Standard__string___axiom.dynamic_invariant str True True True True) -> (let result = (Trabajo_pr3__upper_case_counter.upper_case_counter str) in (
    (if ((Trabajo_pr3__upper_case_counter.upper_case_counter__function_guard result str)) then (
     ( ( ( (if (((Standard__string.length str) = 0)) then (
      (result = 0)) else (
      true)) \/ (if ((result = 0)) then (
      (forall i   "model" "name:i" "model_trace:2853"  : int.
       ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) < 65) \/ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) > 90) ) ))) else (
      (exists i  : int.
       ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) /\ ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) >= 65) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) <= 90) ) )))) ) /\ (Standard__integer___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "lower_case_counter" defined at trabajo_pr3.ads:36, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Trabajo_pr3__lower_case_counter___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__integer___axiom
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Trabajo_pr3__lower_case_counter
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val lower_case_counter 
   (str : Standard__string.string) : int
  requires {  ( ( ((Standard__string.length str) > 0) /\ ((Standard__string.length str) < 2147483647) ) /\ ((Standard__string.last str) < 2147483646) ) }
  ensures {  ( ( (result = (Trabajo_pr3__lower_case_counter.lower_case_counter str)) /\ (Trabajo_pr3__lower_case_counter.lower_case_counter__function_guard result str) ) /\ ( (Standard__integer___axiom.dynamic_invariant result True False True True) /\ ( (if (((Standard__string.length str) = 0)) then (
   (result = 0)) else (
   true)) \/ (if ((result = 0)) then (
   (forall i   "model" "name:i" "model_trace:2964"  : int.
    ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) < 97) \/ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) > 122) ) ))) else (
   (exists i  : int.
    ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) /\ ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) >= 97) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) <= 122) ) )))) ) ) ) }
 
 axiom lower_case_counter__post_axiom :
  (forall str   : Standard__string.string [(Trabajo_pr3__lower_case_counter.lower_case_counter str)].
   ( ( (Standard__string___axiom.dynamic_invariant str True True True True) /\ ( ( ((Standard__string.length str) > 0) /\ ((Standard__string.length str) < 2147483647) ) /\ ((Standard__string.last str) < 2147483646) ) ) -> (let result = (Trabajo_pr3__lower_case_counter.lower_case_counter str) in (
    (if ((Trabajo_pr3__lower_case_counter.lower_case_counter__function_guard result str)) then (
     ( ( ( (if (((Standard__string.length str) = 0)) then (
      (result = 0)) else (
      true)) \/ (if ((result = 0)) then (
      (forall i   "model" "name:i" "model_trace:2964"  : int.
       ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) < 97) \/ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) > 122) ) ))) else (
      (exists i  : int.
       ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) /\ ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) >= 97) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) <= 122) ) )))) ) /\ (Standard__integer___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "string_c_counter" defined at trabajo_pr3.ads:55, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Trabajo_pr3__string_c_counter___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__integer___axiom
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Trabajo_pr3__string_c_counter
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val string_c_counter 
   (str : Standard__string.string) : int
  requires {  (exists j  : int.
   ( ( ((Standard__string.first str) <= j) /\ (j <= (Standard__string.last str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) j)) = 48) )) }
  ensures {  ( ( (result = (Trabajo_pr3__string_c_counter.string_c_counter str)) /\ (Trabajo_pr3__string_c_counter.string_c_counter__function_guard result str) ) /\ ( (Standard__integer___axiom.dynamic_invariant result True False True True) /\ ( (if (((Standard__string.length str) = 0)) then (
   (result = 0)) else (
   true)) \/ (if ((result = 0)) then (
   (forall i   "model" "name:i" "model_trace:3067"  : int.
    ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) <> 48) ))) else (
   (exists i  : int.
    ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) = 48) )))) ) ) ) }
 
 axiom string_c_counter__post_axiom :
  (forall str   : Standard__string.string [(Trabajo_pr3__string_c_counter.string_c_counter str)].
   ( ( (Standard__string___axiom.dynamic_invariant str True True True True) /\ (exists j  : int.
    ( ( ((Standard__string.first str) <= j) /\ (j <= (Standard__string.last str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) j)) = 48) )) ) -> (let result = (Trabajo_pr3__string_c_counter.string_c_counter str) in (
    (if ((Trabajo_pr3__string_c_counter.string_c_counter__function_guard result str)) then (
     ( ( ( (if (((Standard__string.length str) = 0)) then (
      (result = 0)) else (
      true)) \/ (if ((result = 0)) then (
      (forall i   "model" "name:i" "model_trace:3067"  : int.
       ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) <> 48) ))) else (
      (exists i  : int.
       ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array str) i)) = 48) )))) ) /\ (Standard__integer___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "trabajo_pr3" defined at trabajo_pr3.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Trabajo_pr3__package_def
 use import "_gnatprove_standard".Main

 let def #"trabajo_pr3.ads" 1 0 0#"GP_Subp:trabajo_pr3.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"trabajo_pr3.ads" 1 0 0# true }
  ensures { #"trabajo_pr3.ads" 1 0 0# true }
   =
  ( (#"trabajo_pr3.ads" 2 0 0# ());
  (#"trabajo_pr3.ads" 5 0 0# ());
  (#"trabajo_pr3.ads" 11 0 0# ());
  (#"trabajo_pr3.ads" 10 0 0# ());
  (#"trabajo_pr3.ads" 20 0 0# ());
  (#"trabajo_pr3.ads" 26 0 0# ());
  (#"trabajo_pr3.ads" 25 0 0# ());
  (#"trabajo_pr3.ads" 36 0 0# ());
  (#"trabajo_pr3.ads" 45 0 0# ());
  (#"trabajo_pr3.ads" 41 0 0# ());
  (#"trabajo_pr3.ads" 55 0 0# ());
  (#"trabajo_pr3.ads" 63 0 0# ());
  (#"trabajo_pr3.ads" 60 0 0# ());
  (#"trabajo_pr3.adb" 2 0 0# ());
  (#"trabajo_pr3.adb" 5 0 0# ());
  (#"trabajo_pr3.adb" 22 0 0# ());
  (#"trabajo_pr3.adb" 41 0 0# ());
  (#"trabajo_pr3.adb" 67 0 0# ());
  ( "GP_Sloc:trabajo_pr3.adb:86:1" (#"trabajo_pr3.adb" 86 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "space_counter" defined at trabajo_pr3.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Trabajo_pr3__space_counter__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Trabajo_pr3__space_counter__str
 use        Trabajo_pr3__space_counter__result
 use        Trabajo_pr3__space_counter__L_1
 use        Trabajo_pr3__space_counter__L_1__T2b
 use        Trabajo_pr3__space_counter__L_1__i
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Trabajo_pr3__space_counter__result___axiom
 use        Trabajo_pr3__space_counter__L_1__i___axiom
 use        Trabajo_pr3__space_counter__L_1___axiom
 use        Trabajo_pr3__space_counter__str___axiom
 use        Trabajo_pr3__space_counter__L_1__T2b___axiom

 val trabajo_pr3__space_counter__result "model_projected" "model_trace:2733@result" "name:Space_Counter"  : int__ref 
 
 let def #"trabajo_pr3.ads" 5 0 0#"W:diverges:N" "GP_Subp:trabajo_pr3.ads:5" 
   (__void_param : unit)
  requires { #"trabajo_pr3.ads" 5 0 0# true }
  ensures { #"trabajo_pr3.ads" 5 0 0# (#"trabajo_pr3.ads" 11 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:trabajo_pr3.ads:11:15" "GP_Reason:VC_POSTCONDITION" "GP_Id:4" "comment:       Post =>(if Str'Length = 0 then Space_Counter'Result = 0) or
              ^ trabajo_pr3.ads:11:15:VC_POSTCONDITION" "GP_Shape:pragargs__or" ( "GP_Pretty_Ada:3150" "GP_Sloc:trabajo_pr3.ads:11:15" ( (if (((Standard__string.length Trabajo_pr3__space_counter__str.str) = 0)) then (
   (trabajo_pr3__space_counter__result.int__content = 0)) else (
   true)) \/ (if ((trabajo_pr3__space_counter__result.int__content = 0)) then (
   (forall i #"trabajo_pr3.ads" 11 0 0#  "model" "name:i" "model_trace:2777"  : int.
    ( ( ((Standard__string.first Trabajo_pr3__space_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__space_counter__str.str)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__space_counter__str.str) i)) <> 32) ))) else (
   (exists i  : int.
    ( ( ((Standard__string.first Trabajo_pr3__space_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__space_counter__str.str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__space_counter__str.str) i)) = 32) )))) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram trabajo_pr3.ads:5 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Trabajo_pr3__space_counter__str.str True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram trabajo_pr3.ads:5 *)
  ;
  () (* Check for RTE in the Pre of the subprogram trabajo_pr3.ads:5 *)
  ;
   abstract ensures {true}(let _ = (Boolean.of_int(1)) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram trabajo_pr3.ads:5 *)
  ;
   assume {  true };
   try
   ( (#"trabajo_pr3.adb" 5 0 0# ());
   (#"trabajo_pr3.adb" 6 0 0# ( #"trabajo_pr3.adb" 6 0 0# Trabajo_pr3__space_counter__result.result__.int__content <- ( 0 );
   #"trabajo_pr3.adb" 6 0 0# assume { #"trabajo_pr3.adb" 6 0 0# (Standard__integer___axiom.dynamic_invariant Trabajo_pr3__space_counter__result.result__.int__content True False True True) } ));
   (#"trabajo_pr3.adb" 11 0 0# ());
   ( "GP_Sloc:trabajo_pr3.adb:11:26" (#"trabajo_pr3.adb" 11 0 0# (let temp___202 = ( #"trabajo_pr3.adb" 11 0 0# abstract ensures {true}(let _ = Trabajo_pr3__space_counter__str.str in (
    ()))
    end ;
   (Standard__string.first(Trabajo_pr3__space_counter__str.str)) ) in (
   (let temp___203 = ( #"trabajo_pr3.adb" 11 0 0# abstract ensures {true}(let _ = Trabajo_pr3__space_counter__str.str in (
    ()))
    end ;
   (Standard__string.last(Trabajo_pr3__space_counter__str.str)) ) in (
    ( #"trabajo_pr3.adb" 11 0 0# Trabajo_pr3__space_counter__L_1__i.i.int__content <- ( temp___202 );
    () (* Translation of an Ada loop from trabajo_pr3.adb:11 *)
    ;
    (if ((Boolean.andb((temp___202 <= Trabajo_pr3__space_counter__L_1__i.i.int__content)) ((Trabajo_pr3__space_counter__L_1__i.i.int__content <= temp___203)))) then (
     #"trabajo_pr3.adb" 11 0 0# try
      ( #"trabajo_pr3.adb" 11 0 0# abstract ensures {true}(let _ = Trabajo_pr3__space_counter__result.result__.int__content in (
       ()))
       end ;
      (let temp___205 = #"trabajo_pr3.adb" 11 0 0# (any int
      ensures {#"trabajo_pr3.adb" 11 0 0# (result = Trabajo_pr3__space_counter__result.result__.int__content)} 
      ) in (
       ( #"trabajo_pr3.adb" 11 0 0# abstract ensures {true}(let _ = Trabajo_pr3__space_counter__L_1__i.i.int__content in (
        ()))
        end ;
       (let temp___204 = #"trabajo_pr3.adb" 11 0 0# (any int
       ensures {#"trabajo_pr3.adb" 11 0 0# (result = Trabajo_pr3__space_counter__L_1__i.i.int__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop trabajo_pr3.adb:11 *)
        ;
        ( "GP_Sloc:trabajo_pr3.adb:12:10" (#"trabajo_pr3.adb" 12 0 0# (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__space_counter__str.str))) (Trabajo_pr3__space_counter__L_1__i.i.int__content)))) = 32)) then (
         ( ( "GP_Sloc:trabajo_pr3.adb:13:13" (#"trabajo_pr3.adb" 13 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:13:23" (#"trabajo_pr3.adb" 13 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:13:20" (#"trabajo_pr3.adb" 13 0 0# #"trabajo_pr3.adb" 13 0 0# Trabajo_pr3__space_counter__result.result__.int__content <- ( (#"trabajo_pr3.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:trabajo_pr3.adb:13:30" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:0" "comment:            result := result + 1;
                             ^ trabajo_pr3.adb:13:30:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__result_assign__add" (Standard__integer.range_check_((Trabajo_pr3__space_counter__result.result__.int__content + 1))) )) )) ) )) else (
         ()))) );
        () (* While loop translating the Ada loop from trabajo_pr3.adb:11 *)
        ;
         while True do
         invariant { 
          (#"trabajo_pr3.adb" 15 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:trabajo_pr3.adb:15:32" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:1" "comment:         pragma Loop_Invariant(result <= i);
                               ^ trabajo_pr3.adb:15:32:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__cmp" ( "GP_Pretty_Ada:2368" "GP_Sloc:trabajo_pr3.adb:15:32" (Trabajo_pr3__space_counter__result.result__.int__content <= Trabajo_pr3__space_counter__L_1__i.i.int__content) ) ))
          }
         ( () (* Assume implicit invariants from the loop trabajo_pr3.adb:11 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (if (((Standard__string.first Trabajo_pr3__space_counter__str.str) <= (Standard__string.last Trabajo_pr3__space_counter__str.str))) then (
          (Trabajo_pr3__space_counter__L_1__T2b.dynamic_property (Standard__string.first Trabajo_pr3__space_counter__str.str) (Standard__string.last Trabajo_pr3__space_counter__str.str) Trabajo_pr3__space_counter__L_1__i.i.int__content)) else true) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Trabajo_pr3__space_counter__result.result__.int__content False True True True) ) /\ true )) (( ((Standard__string.first Trabajo_pr3__space_counter__str.str) <= Trabajo_pr3__space_counter__L_1__i.i.int__content) /\ (Trabajo_pr3__space_counter__L_1__i.i.int__content <= (Standard__string.last Trabajo_pr3__space_counter__str.str)) ))) };
         () (* Check for absence of RTE in the invariant of loop trabajo_pr3.adb:11 *)
         ;
          abstract ensures {true}(let _ = (Trabajo_pr3__space_counter__result.result__.int__content <= Trabajo_pr3__space_counter__L_1__i.i.int__content) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop trabajo_pr3.adb:11 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop trabajo_pr3.adb:11 *)
         ;
         (if ((Trabajo_pr3__space_counter__L_1__i.i.int__content = temp___203)) then (
           raise Trabajo_pr3__space_counter__L_1.L_1));
          Trabajo_pr3__space_counter__L_1__i.i.int__content <- ( (Trabajo_pr3__space_counter__L_1__i.i.int__content + 1) );
         ( "GP_Sloc:trabajo_pr3.adb:12:10" (#"trabajo_pr3.adb" 12 0 0# (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__space_counter__str.str))) (Trabajo_pr3__space_counter__L_1__i.i.int__content)))) = 32)) then (
          ( ( "GP_Sloc:trabajo_pr3.adb:13:13" (#"trabajo_pr3.adb" 13 0 0# ()) );
          ( "GP_Sloc:trabajo_pr3.adb:13:23" (#"trabajo_pr3.adb" 13 0 0# ()) );
          ( "GP_Sloc:trabajo_pr3.adb:13:20" (#"trabajo_pr3.adb" 13 0 0# #"trabajo_pr3.adb" 13 0 0# Trabajo_pr3__space_counter__result.result__.int__content <- ( (#"trabajo_pr3.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:trabajo_pr3.adb:13:30" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:0" "comment:            result := result + 1;
                             ^ trabajo_pr3.adb:13:30:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__result_assign__add" (Standard__integer.range_check_((Trabajo_pr3__space_counter__result.result__.int__content + 1))) )) )) ) )) else (
          ()))) ) )
        done )))
        )))
       )
     with
      Trabajo_pr3__space_counter__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:trabajo_pr3.adb:17:14" (#"trabajo_pr3.adb" 17 0 0# ()) );
   ( "GP_Sloc:trabajo_pr3.adb:17:7" (#"trabajo_pr3.adb" 17 0 0# ( #"trabajo_pr3.adb" 17 0 0# trabajo_pr3__space_counter__result.int__content <- ( Trabajo_pr3__space_counter__result.result__.int__content );
   #"trabajo_pr3.adb" 17 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.orb((if (((  abstract ensures {true}(let _ = Trabajo_pr3__space_counter__str.str in (
   ()))
   end ;
  (Standard__string.length(Trabajo_pr3__space_counter__str.str)) ) = 0)) then (
   (trabajo_pr3__space_counter__result.int__content = 0)) else (
   (Boolean.of_int(1))))) ((if ((trabajo_pr3__space_counter__result.int__content = 0)) then (
   ( (let i =  (any int
   ) in (
    (if ((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__space_counter__str.str in (
     ()))
     end ;
    (Standard__string.first(Trabajo_pr3__space_counter__str.str)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Trabajo_pr3__space_counter__str.str in (
     ()))
     end ;
    (Standard__string.last(Trabajo_pr3__space_counter__str.str)) ))))) then (
      abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__space_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:trabajo_pr3.ads:14:27" "GP_Reason:VC_INDEX_CHECK" "GP_Id:2" "comment:                     Str (i) /= ' ')
                          ^ trabajo_pr3.ads:14:27:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forall__cmp__ixdcomp" ( ((Standard__string.first Trabajo_pr3__space_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__space_counter__str.str)) ) )) };
     i ))))) <> 32) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:i" "model_trace:2777"  : int.
    ( ( ((Standard__string.first Trabajo_pr3__space_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__space_counter__str.str)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__space_counter__str.str) i)) <> 32) )) )} 
   ) )) else (
   ( (let i =  (any int
   ) in (
    (if ((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__space_counter__str.str in (
     ()))
     end ;
    (Standard__string.first(Trabajo_pr3__space_counter__str.str)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Trabajo_pr3__space_counter__str.str in (
     ()))
     end ;
    (Standard__string.last(Trabajo_pr3__space_counter__str.str)) ))))) then (
      abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__space_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:trabajo_pr3.ads:17:30" "GP_Id:3" "comment:                        Str (i) = ' '));
                             ^ trabajo_pr3.ads:17:30:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forsome__cmp__ixdcomp" ( ((Standard__string.first Trabajo_pr3__space_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__space_counter__str.str)) ) )) };
     i ))))) = 32) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (exists i  : int.
    ( ( ((Standard__string.first Trabajo_pr3__space_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__space_counter__str.str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__space_counter__str.str) i)) = 32) )) )} 
   ) ))))) in (
   ()))
   end ;
  trabajo_pr3__space_counter__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "upper_case_counter" defined at trabajo_pr3.ads:20, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Trabajo_pr3__upper_case_counter__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Trabajo_pr3__upper_case_counter__str
 use        Trabajo_pr3__upper_case_counter__result
 use        Trabajo_pr3__upper_case_counter__L_2
 use        Trabajo_pr3__upper_case_counter__L_2__T6b
 use        Trabajo_pr3__upper_case_counter__L_2__i
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Trabajo_pr3__upper_case_counter__result___axiom
 use        Trabajo_pr3__upper_case_counter__L_2__i___axiom
 use        Trabajo_pr3__upper_case_counter__L_2___axiom
 use        Trabajo_pr3__upper_case_counter__str___axiom
 use        Trabajo_pr3__upper_case_counter__L_2__T6b___axiom

 val trabajo_pr3__upper_case_counter__result "model_projected" "model_trace:2809@result" "name:Upper_Case_Counter"  : int__ref 
 
 let def #"trabajo_pr3.ads" 20 0 0#"W:diverges:N" "GP_Subp:trabajo_pr3.ads:20" 
   (__void_param : unit)
  requires { #"trabajo_pr3.ads" 20 0 0# true }
  ensures { #"trabajo_pr3.ads" 20 0 0# (#"trabajo_pr3.ads" 26 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__or" "GP_Sloc:trabajo_pr3.ads:26:16" "GP_Id:13" "comment:       Post => (if Str'Length = 0 then Upper_Case_Counter'Result = 0) or
               ^ trabajo_pr3.ads:26:16:VC_POSTCONDITION" ( "GP_Pretty_Ada:3225" "GP_Sloc:trabajo_pr3.ads:26:16" ( (if (((Standard__string.length Trabajo_pr3__upper_case_counter__str.str) = 0)) then (
   (trabajo_pr3__upper_case_counter__result.int__content = 0)) else (
   true)) \/ (if ((trabajo_pr3__upper_case_counter__result.int__content = 0)) then (
   (forall i #"trabajo_pr3.ads" 26 0 0#  "model" "name:i" "model_trace:2853"  : int.
    ( ( ((Standard__string.first Trabajo_pr3__upper_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__upper_case_counter__str.str)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__upper_case_counter__str.str) i)) < 65) \/ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__upper_case_counter__str.str) i)) > 90) ) ))) else (
   (exists i  : int.
    ( ( ((Standard__string.first Trabajo_pr3__upper_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__upper_case_counter__str.str)) ) /\ ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__upper_case_counter__str.str) i)) >= 65) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__upper_case_counter__str.str) i)) <= 90) ) )))) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram trabajo_pr3.ads:20 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Trabajo_pr3__upper_case_counter__str.str True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram trabajo_pr3.ads:20 *)
  ;
  () (* Check for RTE in the Pre of the subprogram trabajo_pr3.ads:20 *)
  ;
   abstract ensures {true}(let _ = (Boolean.of_int(1)) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram trabajo_pr3.ads:20 *)
  ;
   assume {  true };
   try
   ( (#"trabajo_pr3.adb" 22 0 0# ());
   (#"trabajo_pr3.adb" 25 0 0# ( #"trabajo_pr3.adb" 25 0 0# Trabajo_pr3__upper_case_counter__result.result__.int__content <- ( 0 );
   #"trabajo_pr3.adb" 25 0 0# assume { #"trabajo_pr3.adb" 25 0 0# (Standard__integer___axiom.dynamic_invariant Trabajo_pr3__upper_case_counter__result.result__.int__content True False True True) } ));
   (#"trabajo_pr3.adb" 30 0 0# ());
   ( "GP_Sloc:trabajo_pr3.adb:27:7" (#"trabajo_pr3.adb" 27 0 0# (if ((( #"trabajo_pr3.adb" 27 0 0# abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__str.str in (
    ()))
    end ;
   (Standard__string.length(Trabajo_pr3__upper_case_counter__str.str)) ) < 1)) then (
    ( ( "GP_Sloc:trabajo_pr3.adb:28:17" (#"trabajo_pr3.adb" 28 0 0# ()) );
    ( "GP_Sloc:trabajo_pr3.adb:28:10" (#"trabajo_pr3.adb" 28 0 0# ( #"trabajo_pr3.adb" 28 0 0# trabajo_pr3__upper_case_counter__result.int__content <- ( Trabajo_pr3__upper_case_counter__result.result__.int__content );
    #"trabajo_pr3.adb" 28 0 0# raise Return__exc )) ) )) else (
    ()))) );
   ( "GP_Sloc:trabajo_pr3.adb:30:26" (#"trabajo_pr3.adb" 30 0 0# (let temp___207 = ( #"trabajo_pr3.adb" 30 0 0# abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__str.str in (
    ()))
    end ;
   (Standard__string.first(Trabajo_pr3__upper_case_counter__str.str)) ) in (
   (let temp___208 = ( #"trabajo_pr3.adb" 30 0 0# abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__str.str in (
    ()))
    end ;
   (Standard__string.last(Trabajo_pr3__upper_case_counter__str.str)) ) in (
    ( #"trabajo_pr3.adb" 30 0 0# Trabajo_pr3__upper_case_counter__L_2__i.i.int__content <- ( temp___207 );
    () (* Translation of an Ada loop from trabajo_pr3.adb:30 *)
    ;
    (if ((Boolean.andb((temp___207 <= Trabajo_pr3__upper_case_counter__L_2__i.i.int__content)) ((Trabajo_pr3__upper_case_counter__L_2__i.i.int__content <= temp___208)))) then (
     #"trabajo_pr3.adb" 30 0 0# try
      ( #"trabajo_pr3.adb" 30 0 0# abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__L_2__i.i.int__content in (
       ()))
       end ;
      (let temp___210 = #"trabajo_pr3.adb" 30 0 0# (any int
      ensures {#"trabajo_pr3.adb" 30 0 0# (result = Trabajo_pr3__upper_case_counter__L_2__i.i.int__content)} 
      ) in (
       ( #"trabajo_pr3.adb" 30 0 0# abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__result.result__.int__content in (
        ()))
        end ;
       (let temp___209 = #"trabajo_pr3.adb" 30 0 0# (any int
       ensures {#"trabajo_pr3.adb" 30 0 0# (result = Trabajo_pr3__upper_case_counter__result.result__.int__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop trabajo_pr3.adb:30 *)
        ;
        ( "GP_Sloc:trabajo_pr3.adb:31:10" (#"trabajo_pr3.adb" 31 0 0# (if ((Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__upper_case_counter__str.str))) (Trabajo_pr3__upper_case_counter__L_2__i.i.int__content)))) >= 65)) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__upper_case_counter__str.str))) (Trabajo_pr3__upper_case_counter__L_2__i.i.int__content)))) <= 90)))) then (
         ( ( "GP_Sloc:trabajo_pr3.adb:32:13" (#"trabajo_pr3.adb" 32 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:32:23" (#"trabajo_pr3.adb" 32 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:32:20" (#"trabajo_pr3.adb" 32 0 0# #"trabajo_pr3.adb" 32 0 0# Trabajo_pr3__upper_case_counter__result.result__.int__content <- ( (#"trabajo_pr3.adb" 32 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:32:30" "GP_Id:5" "comment:            result := result + 1;
                             ^ trabajo_pr3.adb:32:30:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__result_assign__add" (Standard__integer.range_check_((Trabajo_pr3__upper_case_counter__result.result__.int__content + 1))) )) )) ) )) else (
         ()))) );
        () (* While loop translating the Ada loop from trabajo_pr3.adb:30 *)
        ;
         while True do
         invariant { 
          (#"trabajo_pr3.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:trabajo_pr3.adb:34:32" "GP_Id:8" "comment:         pragma Loop_Invariant(result <= i-Str'First+1);
                               ^ trabajo_pr3.adb:34:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__cmp" ( "GP_Pretty_Ada:2448" "GP_Sloc:trabajo_pr3.adb:34:32" (Trabajo_pr3__upper_case_counter__result.result__.int__content <= ((Trabajo_pr3__upper_case_counter__L_2__i.i.int__content - (Standard__string.first Trabajo_pr3__upper_case_counter__str.str)) + 1)) ) ))
          }
         ( () (* Assume implicit invariants from the loop trabajo_pr3.adb:30 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Trabajo_pr3__upper_case_counter__result.result__.int__content False True True True) ) /\ true ) /\ (if (((Standard__string.first Trabajo_pr3__upper_case_counter__str.str) <= (Standard__string.last Trabajo_pr3__upper_case_counter__str.str))) then (
          (Trabajo_pr3__upper_case_counter__L_2__T6b.dynamic_property (Standard__string.first Trabajo_pr3__upper_case_counter__str.str) (Standard__string.last Trabajo_pr3__upper_case_counter__str.str) Trabajo_pr3__upper_case_counter__L_2__i.i.int__content)) else true) ) /\ true )) (( ((Standard__string.first Trabajo_pr3__upper_case_counter__str.str) <= Trabajo_pr3__upper_case_counter__L_2__i.i.int__content) /\ (Trabajo_pr3__upper_case_counter__L_2__i.i.int__content <= (Standard__string.last Trabajo_pr3__upper_case_counter__str.str)) ))) };
         () (* Check for absence of RTE in the invariant of loop trabajo_pr3.adb:30 *)
         ;
          abstract ensures {true}(let _ = (Trabajo_pr3__upper_case_counter__result.result__.int__content <= (#"trabajo_pr3.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:34:53" "GP_Id:7" "comment:         pragma Loop_Invariant(result <= i-Str'First+1);
                                                    ^ trabajo_pr3.adb:34:53:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__cmp__add" (Standard__integer.range_check_(((#"trabajo_pr3.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:34:43" "GP_Id:6" "comment:         pragma Loop_Invariant(result <= i-Str'First+1);
                                          ^ trabajo_pr3.adb:34:43:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__cmp__add__sub" (Standard__integer.range_check_((Trabajo_pr3__upper_case_counter__L_2__i.i.int__content - ( #"trabajo_pr3.adb" 34 0 0# abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__str.str in (
          ()))
          end ;
         (Standard__string.first(Trabajo_pr3__upper_case_counter__str.str)) )))) )) + 1))) ))) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop trabajo_pr3.adb:30 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop trabajo_pr3.adb:30 *)
         ;
         (if ((Trabajo_pr3__upper_case_counter__L_2__i.i.int__content = temp___208)) then (
           raise Trabajo_pr3__upper_case_counter__L_2.L_2));
          Trabajo_pr3__upper_case_counter__L_2__i.i.int__content <- ( (Trabajo_pr3__upper_case_counter__L_2__i.i.int__content + 1) );
         ( "GP_Sloc:trabajo_pr3.adb:31:10" (#"trabajo_pr3.adb" 31 0 0# (if ((Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__upper_case_counter__str.str))) (Trabajo_pr3__upper_case_counter__L_2__i.i.int__content)))) >= 65)) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__upper_case_counter__str.str))) (Trabajo_pr3__upper_case_counter__L_2__i.i.int__content)))) <= 90)))) then (
          ( ( "GP_Sloc:trabajo_pr3.adb:32:13" (#"trabajo_pr3.adb" 32 0 0# ()) );
          ( "GP_Sloc:trabajo_pr3.adb:32:23" (#"trabajo_pr3.adb" 32 0 0# ()) );
          ( "GP_Sloc:trabajo_pr3.adb:32:20" (#"trabajo_pr3.adb" 32 0 0# #"trabajo_pr3.adb" 32 0 0# Trabajo_pr3__upper_case_counter__result.result__.int__content <- ( (#"trabajo_pr3.adb" 32 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:32:30" "GP_Id:5" "comment:            result := result + 1;
                             ^ trabajo_pr3.adb:32:30:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__result_assign__add" (Standard__integer.range_check_((Trabajo_pr3__upper_case_counter__result.result__.int__content + 1))) )) )) ) )) else (
          ()))) ) )
        done )))
        )))
       )
     with
      Trabajo_pr3__upper_case_counter__L_2.L_2 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:trabajo_pr3.adb:36:14" (#"trabajo_pr3.adb" 36 0 0# ()) );
   ( "GP_Sloc:trabajo_pr3.adb:36:7" (#"trabajo_pr3.adb" 36 0 0# ( #"trabajo_pr3.adb" 36 0 0# trabajo_pr3__upper_case_counter__result.int__content <- ( Trabajo_pr3__upper_case_counter__result.result__.int__content );
   #"trabajo_pr3.adb" 36 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.orb((if (((  abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__str.str in (
   ()))
   end ;
  (Standard__string.length(Trabajo_pr3__upper_case_counter__str.str)) ) = 0)) then (
   (trabajo_pr3__upper_case_counter__result.int__content = 0)) else (
   (Boolean.of_int(1))))) ((if ((trabajo_pr3__upper_case_counter__result.int__content = 0)) then (
   ( (let i =  (any int
   ) in (
    (if ((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__str.str in (
     ()))
     end ;
    (Standard__string.first(Trabajo_pr3__upper_case_counter__str.str)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__str.str in (
     ()))
     end ;
    (Standard__string.last(Trabajo_pr3__upper_case_counter__str.str)) ))))) then (
      abstract ensures {true}(let _ = (Boolean.orb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__upper_case_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 29 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:trabajo_pr3.ads:29:27" "GP_Id:9" "comment:                     (Str(i) < 'A') or (Str(i) > 'Z'))
                          ^ trabajo_pr3.ads:29:27:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forall__or__cmp__ixdcomp" ( ((Standard__string.first Trabajo_pr3__upper_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__upper_case_counter__str.str)) ) )) };
     i ))))) < 65)) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__upper_case_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 29 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forall__or__cmp__ixdcomp" "GP_Sloc:trabajo_pr3.ads:29:45" "GP_Id:10" "comment:                     (Str(i) < 'A') or (Str(i) > 'Z'))
                                            ^ trabajo_pr3.ads:29:45:VC_INDEX_CHECK" ( ((Standard__string.first Trabajo_pr3__upper_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__upper_case_counter__str.str)) ) )) };
     i ))))) > 90))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:i" "model_trace:2853"  : int.
    ( ( ((Standard__string.first Trabajo_pr3__upper_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__upper_case_counter__str.str)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__upper_case_counter__str.str) i)) < 65) \/ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__upper_case_counter__str.str) i)) > 90) ) )) )} 
   ) )) else (
   ( (let i =  (any int
   ) in (
    (if ((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__str.str in (
     ()))
     end ;
    (Standard__string.first(Trabajo_pr3__upper_case_counter__str.str)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Trabajo_pr3__upper_case_counter__str.str in (
     ()))
     end ;
    (Standard__string.last(Trabajo_pr3__upper_case_counter__str.str)) ))))) then (
      abstract ensures {true}(let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__upper_case_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 32 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:trabajo_pr3.ads:32:25" "GP_Id:11" "comment:                   (Str(i) >= 'A') and (Str(i) <= 'Z')));
                        ^ trabajo_pr3.ads:32:25:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forsome__and__cmp__ixdcomp" ( ((Standard__string.first Trabajo_pr3__upper_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__upper_case_counter__str.str)) ) )) };
     i ))))) >= 65)) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__upper_case_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 32 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forsome__and__cmp__ixdcomp" "GP_Sloc:trabajo_pr3.ads:32:45" "GP_Id:12" "comment:                   (Str(i) >= 'A') and (Str(i) <= 'Z')));
                                            ^ trabajo_pr3.ads:32:45:VC_INDEX_CHECK" ( ((Standard__string.first Trabajo_pr3__upper_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__upper_case_counter__str.str)) ) )) };
     i ))))) <= 90))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (exists i  : int.
    ( ( ((Standard__string.first Trabajo_pr3__upper_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__upper_case_counter__str.str)) ) /\ ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__upper_case_counter__str.str) i)) >= 65) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__upper_case_counter__str.str) i)) <= 90) ) )) )} 
   ) ))))) in (
   ()))
   end ;
  trabajo_pr3__upper_case_counter__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "lower_case_counter" defined at trabajo_pr3.ads:36, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Trabajo_pr3__lower_case_counter__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Trabajo_pr3__lower_case_counter__str
 use        Trabajo_pr3__lower_case_counter__result
 use        Trabajo_pr3__lower_case_counter__i
 use        Trabajo_pr3__lower_case_counter__L_3
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Trabajo_pr3__lower_case_counter__result___axiom
 use        Trabajo_pr3__lower_case_counter__i___axiom
 use        Trabajo_pr3__lower_case_counter__L_3___axiom
 use        Trabajo_pr3__lower_case_counter__str___axiom

 val trabajo_pr3__lower_case_counter__result "model_projected" "model_trace:2897@result" "name:Lower_Case_Counter"  : int__ref 
 
 let def #"trabajo_pr3.ads" 36 0 0#"W:diverges:N" "GP_Subp:trabajo_pr3.ads:36" 
   (__void_param : unit)
  requires { #"trabajo_pr3.ads" 36 0 0# true }
  ensures { #"trabajo_pr3.ads" 36 0 0# (#"trabajo_pr3.ads" 45 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__or" "GP_Sloc:trabajo_pr3.ads:45:16" "GP_Id:30" "comment:       Post => (if Str'Length = 0 then Lower_Case_Counter'Result = 0) or
               ^ trabajo_pr3.ads:45:16:VC_POSTCONDITION" ( "GP_Pretty_Ada:3317" "GP_Sloc:trabajo_pr3.ads:45:16" ( (if (((Standard__string.length Trabajo_pr3__lower_case_counter__str.str) = 0)) then (
   (trabajo_pr3__lower_case_counter__result.int__content = 0)) else (
   true)) \/ (if ((trabajo_pr3__lower_case_counter__result.int__content = 0)) then (
   (forall i #"trabajo_pr3.ads" 45 0 0#  "model" "name:i" "model_trace:2964"  : int.
    ( ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__lower_case_counter__str.str) i)) < 97) \/ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__lower_case_counter__str.str) i)) > 122) ) ))) else (
   (exists i  : int.
    ( ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) /\ ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__lower_case_counter__str.str) i)) >= 97) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__lower_case_counter__str.str) i)) <= 122) ) )))) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram trabajo_pr3.ads:36 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Trabajo_pr3__lower_case_counter__str.str True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram trabajo_pr3.ads:36 *)
  ;
  () (* Check for RTE in the Pre of the subprogram trabajo_pr3.ads:36 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
   ()))
   end ;
  (Standard__string.length(Trabajo_pr3__lower_case_counter__str.str)) ) > 0)) (((#"trabajo_pr3.ads" 42 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:trabajo_pr3.ads:42:14" "GP_Reason:VC_RANGE_CHECK" "GP_Id:29" "comment:         (Str'Length < Integer'Last) and
             ^ trabajo_pr3.ads:42:14:VC_RANGE_CHECK" "GP_Shape:pragargs__and__and__cmp__typeconv__length_ref" (Standard__integer.range_check_(( #"trabajo_pr3.ads" 42 0 0# abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
   ()))
   end ;
  (Standard__string.length(Trabajo_pr3__lower_case_counter__str.str)) ))) )) < 2147483647)))) (((  abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
   ()))
   end ;
  (Standard__string.last(Trabajo_pr3__lower_case_counter__str.str)) ) < 2147483646))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram trabajo_pr3.ads:36 *)
  ;
   assume {  ( ( ((Standard__string.length Trabajo_pr3__lower_case_counter__str.str) > 0) /\ ((Standard__string.length Trabajo_pr3__lower_case_counter__str.str) < 2147483647) ) /\ ((Standard__string.last Trabajo_pr3__lower_case_counter__str.str) < 2147483646) ) };
   try
   ( (#"trabajo_pr3.adb" 41 0 0# ());
   (#"trabajo_pr3.adb" 44 0 0# ( #"trabajo_pr3.adb" 44 0 0# Trabajo_pr3__lower_case_counter__result.result__.int__content <- ( 0 );
   #"trabajo_pr3.adb" 44 0 0# assume { #"trabajo_pr3.adb" 44 0 0# (Standard__integer___axiom.dynamic_invariant Trabajo_pr3__lower_case_counter__result.result__.int__content True False True True) } ));
   (#"trabajo_pr3.adb" 45 0 0# ( #"trabajo_pr3.adb" 45 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"trabajo_pr3.adb" 45 0 0# assume { #"trabajo_pr3.adb" 45 0 0# (Standard__integer___axiom.default_initial_assumption Trabajo_pr3__lower_case_counter__i.i.int__content False) };
   #"trabajo_pr3.adb" 45 0 0# assume { #"trabajo_pr3.adb" 45 0 0# (Standard__integer___axiom.dynamic_invariant Trabajo_pr3__lower_case_counter__i.i.int__content False False True True) } ));
   (#"trabajo_pr3.adb" 51 0 0# ());
   ( "GP_Sloc:trabajo_pr3.adb:47:7" (#"trabajo_pr3.adb" 47 0 0# (if ((Boolean.orb((( #"trabajo_pr3.adb" 47 0 0# abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
    ()))
    end ;
   (Standard__string.length(Trabajo_pr3__lower_case_counter__str.str)) ) < 1)) ((( #"trabajo_pr3.adb" 47 0 0# abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
    ()))
    end ;
   (Standard__string.first(Trabajo_pr3__lower_case_counter__str.str)) ) >= ( #"trabajo_pr3.adb" 47 0 0# abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
    ()))
    end ;
   (Standard__string.last(Trabajo_pr3__lower_case_counter__str.str)) ))))) then (
    ( ( "GP_Sloc:trabajo_pr3.adb:48:17" (#"trabajo_pr3.adb" 48 0 0# ()) );
    ( "GP_Sloc:trabajo_pr3.adb:48:10" (#"trabajo_pr3.adb" 48 0 0# ( #"trabajo_pr3.adb" 48 0 0# trabajo_pr3__lower_case_counter__result.int__content <- ( Trabajo_pr3__lower_case_counter__result.result__.int__content );
    #"trabajo_pr3.adb" 48 0 0# raise Return__exc )) ) )) else (
    ()))) );
   ( "GP_Sloc:trabajo_pr3.adb:50:7" (#"trabajo_pr3.adb" 50 0 0# ()) );
   ( "GP_Sloc:trabajo_pr3.adb:50:8" (#"trabajo_pr3.adb" 50 0 0# #"trabajo_pr3.adb" 50 0 0# Trabajo_pr3__lower_case_counter__i.i.int__content <- ( ( #"trabajo_pr3.adb" 50 0 0# abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
    ()))
    end ;
   (Standard__string.first(Trabajo_pr3__lower_case_counter__str.str)) ) )) );
   ( "GP_Sloc:trabajo_pr3.adb:51:27" (#"trabajo_pr3.adb" 51 0 0# ( () (* Translation of an Ada loop from trabajo_pr3.adb:51 *)
   ;
   (if ((Trabajo_pr3__lower_case_counter__i.i.int__content <= ( #"trabajo_pr3.adb" 51 0 0# abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
    ()))
    end ;
   (Standard__string.last(Trabajo_pr3__lower_case_counter__str.str)) ))) then (
    #"trabajo_pr3.adb" 51 0 0# try
     ( #"trabajo_pr3.adb" 51 0 0# abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__i.i.int__content in (
      ()))
      end ;
     (let temp___213 = #"trabajo_pr3.adb" 51 0 0# (any int
     ensures {#"trabajo_pr3.adb" 51 0 0# (result = Trabajo_pr3__lower_case_counter__i.i.int__content)} 
     ) in (
      ( #"trabajo_pr3.adb" 51 0 0# abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__result.result__.int__content in (
       ()))
       end ;
      (let temp___212 = #"trabajo_pr3.adb" 51 0 0# (any int
      ensures {#"trabajo_pr3.adb" 51 0 0# (result = Trabajo_pr3__lower_case_counter__result.result__.int__content)} 
      ) in (
       #"trabajo_pr3.adb" 51 0 0# let temp___214 = { int__content = 0 } in 
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop trabajo_pr3.adb:51 *)
        ;
        ( "GP_Sloc:trabajo_pr3.adb:52:18" (#"trabajo_pr3.adb" 52 0 0# ()) );
        ( "GP_Sloc:trabajo_pr3.adb:52:38" (#"trabajo_pr3.adb" 52 0 0# ()) );
        ( "GP_Sloc:trabajo_pr3.adb:52:10" (#"trabajo_pr3.adb" 52 0 0# (if ((Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__lower_case_counter__str.str))) (( #"trabajo_pr3.adb" 52 0 0# assert { #"trabajo_pr3.adb" 52 0 0# (#"trabajo_pr3.adb" 52 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:trabajo_pr3.adb:52:18" "GP_Id:15" "comment:         if (Str(i) >= 'a') and (Str(i) <= 'z') then
                 ^ trabajo_pr3.adb:52:18:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__and__cmp__ixdcomp" ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= Trabajo_pr3__lower_case_counter__i.i.int__content) /\ (Trabajo_pr3__lower_case_counter__i.i.int__content <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) )) };
        Trabajo_pr3__lower_case_counter__i.i.int__content ))))) >= 97)) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__lower_case_counter__str.str))) ((  assert {  (#"trabajo_pr3.adb" 52 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:trabajo_pr3.adb:52:38" "GP_Shape:L_3_while__if__and__cmp__ixdcomp" "GP_Id:16" "comment:         if (Str(i) >= 'a') and (Str(i) <= 'z') then
                                     ^ trabajo_pr3.adb:52:38:VC_INDEX_CHECK" ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= Trabajo_pr3__lower_case_counter__i.i.int__content) /\ (Trabajo_pr3__lower_case_counter__i.i.int__content <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) )) };
        Trabajo_pr3__lower_case_counter__i.i.int__content ))))) <= 122)))) then (
         ( ( "GP_Sloc:trabajo_pr3.adb:53:13" (#"trabajo_pr3.adb" 53 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:53:23" (#"trabajo_pr3.adb" 53 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:53:20" (#"trabajo_pr3.adb" 53 0 0# #"trabajo_pr3.adb" 53 0 0# Trabajo_pr3__lower_case_counter__result.result__.int__content <- ( (#"trabajo_pr3.adb" 53 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:53:30" "GP_Id:14" "comment:            result := result + 1;
                             ^ trabajo_pr3.adb:53:30:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__if__result_assign__add" (Standard__integer.range_check_((Trabajo_pr3__lower_case_counter__result.result__.int__content + 1))) )) )) ) )) else (
         ()))) );
        ( "GP_Sloc:trabajo_pr3.adb:55:10" (#"trabajo_pr3.adb" 55 0 0# ()) );
        ( "GP_Sloc:trabajo_pr3.adb:55:14" (#"trabajo_pr3.adb" 55 0 0# ()) );
        ( "GP_Sloc:trabajo_pr3.adb:55:12" (#"trabajo_pr3.adb" 55 0 0# #"trabajo_pr3.adb" 55 0 0# Trabajo_pr3__lower_case_counter__i.i.int__content <- ( (#"trabajo_pr3.adb" 55 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:55:15" "GP_Id:17" "comment:         i :=i+1;
              ^ trabajo_pr3.adb:55:15:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__i_assign__add" (Standard__integer.range_check_((Trabajo_pr3__lower_case_counter__i.i.int__content + 1))) )) )) );
        () (* While loop translating the Ada loop from trabajo_pr3.adb:51 *)
        ;
         while True do
         invariant { 
          (#"trabajo_pr3.adb" 57 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:trabajo_pr3.adb:57:32" "GP_Id:18" "comment:         pragma Loop_Invariant(i>=Str'First);
                               ^ trabajo_pr3.adb:57:32:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__cmp" ( "GP_Pretty_Ada:2560" "GP_Sloc:trabajo_pr3.adb:57:32" (Trabajo_pr3__lower_case_counter__i.i.int__content >= (Standard__string.first Trabajo_pr3__lower_case_counter__str.str)) ) ))
          }
         invariant { 
          (#"trabajo_pr3.adb" 58 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__cmp" "GP_Sloc:trabajo_pr3.adb:58:32" "GP_Id:20" "comment:         pragma Loop_Invariant(i<=Str'Last+1);
                               ^ trabajo_pr3.adb:58:32:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2568" "GP_Sloc:trabajo_pr3.adb:58:32" (Trabajo_pr3__lower_case_counter__i.i.int__content <= ((Standard__string.last Trabajo_pr3__lower_case_counter__str.str) + 1)) ) ))
          }
         invariant { 
          (#"trabajo_pr3.adb" 59 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__cmp" "GP_Sloc:trabajo_pr3.adb:59:32" "GP_Id:23" "comment:         pragma Loop_Invariant(result <= (i-Str'First)+1);
                               ^ trabajo_pr3.adb:59:32:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2577" "GP_Sloc:trabajo_pr3.adb:59:32" (Trabajo_pr3__lower_case_counter__result.result__.int__content <= ((Trabajo_pr3__lower_case_counter__i.i.int__content - (Standard__string.first Trabajo_pr3__lower_case_counter__str.str)) + 1)) ) ))
          }
         ( () (* Assume implicit invariants from the loop trabajo_pr3.adb:51 *)
         ;
          assume {  ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Trabajo_pr3__lower_case_counter__result.result__.int__content False True True True) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Trabajo_pr3__lower_case_counter__i.i.int__content False True True True) ) /\ true ) };
         () (* Check for absence of RTE in the invariant of loop trabajo_pr3.adb:51 *)
         ;
          abstract ensures {true}(let _ = (Trabajo_pr3__lower_case_counter__i.i.int__content >= (  abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
          ()))
          end ;
         (Standard__string.first(Trabajo_pr3__lower_case_counter__str.str)) )) in (
          ()))
          end ;
          abstract ensures {true}(let _ = (Trabajo_pr3__lower_case_counter__i.i.int__content <= (#"trabajo_pr3.adb" 58 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:58:43" "GP_Id:19" "comment:         pragma Loop_Invariant(i<=Str'Last+1);
                                          ^ trabajo_pr3.adb:58:43:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__pragargs__cmp__add" (Standard__integer.range_check_((( #"trabajo_pr3.adb" 58 0 0# abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
          ()))
          end ;
         (Standard__string.last(Trabajo_pr3__lower_case_counter__str.str)) ) + 1))) ))) in (
          ()))
          end ;
          abstract ensures {true}(let _ = (Trabajo_pr3__lower_case_counter__result.result__.int__content <= (#"trabajo_pr3.adb" 59 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__pragargs__cmp__add" "GP_Sloc:trabajo_pr3.adb:59:55" "GP_Id:22" "comment:         pragma Loop_Invariant(result <= (i-Str'First)+1);
                                                      ^ trabajo_pr3.adb:59:55:VC_OVERFLOW_CHECK" (Standard__integer.range_check_(((#"trabajo_pr3.adb" 59 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:59:44" "GP_Id:21" "comment:         pragma Loop_Invariant(result <= (i-Str'First)+1);
                                           ^ trabajo_pr3.adb:59:44:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__pragargs__cmp__add__sub" (Standard__integer.range_check_((Trabajo_pr3__lower_case_counter__i.i.int__content - ( #"trabajo_pr3.adb" 59 0 0# abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
          ()))
          end ;
         (Standard__string.first(Trabajo_pr3__lower_case_counter__str.str)) )))) )) + 1))) ))) in (
          ()))
          end ;
          temp___214.int__content <- ( Trabajo_pr3__lower_case_counter__i.i.int__content );
         () (* Loop statements appearing after the loop invariant of loop trabajo_pr3.adb:51 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop trabajo_pr3.adb:51 *)
         ;
         (if (not ( (Trabajo_pr3__lower_case_counter__i.i.int__content <= (  abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
          ()))
          end ;
         (Standard__string.last(Trabajo_pr3__lower_case_counter__str.str)) )) )) then (
           raise Trabajo_pr3__lower_case_counter__L_3.L_3));
         ( "GP_Sloc:trabajo_pr3.adb:52:18" (#"trabajo_pr3.adb" 52 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:52:38" (#"trabajo_pr3.adb" 52 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:52:10" (#"trabajo_pr3.adb" 52 0 0# (if ((Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__lower_case_counter__str.str))) (( #"trabajo_pr3.adb" 52 0 0# assert { #"trabajo_pr3.adb" 52 0 0# (#"trabajo_pr3.adb" 52 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:trabajo_pr3.adb:52:18" "GP_Id:15" "comment:         if (Str(i) >= 'a') and (Str(i) <= 'z') then
                 ^ trabajo_pr3.adb:52:18:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__and__cmp__ixdcomp" ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= Trabajo_pr3__lower_case_counter__i.i.int__content) /\ (Trabajo_pr3__lower_case_counter__i.i.int__content <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) )) };
         Trabajo_pr3__lower_case_counter__i.i.int__content ))))) >= 97)) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__lower_case_counter__str.str))) ((  assert {  (#"trabajo_pr3.adb" 52 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:trabajo_pr3.adb:52:38" "GP_Shape:L_3_while__if__and__cmp__ixdcomp" "GP_Id:16" "comment:         if (Str(i) >= 'a') and (Str(i) <= 'z') then
                                     ^ trabajo_pr3.adb:52:38:VC_INDEX_CHECK" ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= Trabajo_pr3__lower_case_counter__i.i.int__content) /\ (Trabajo_pr3__lower_case_counter__i.i.int__content <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) )) };
         Trabajo_pr3__lower_case_counter__i.i.int__content ))))) <= 122)))) then (
          ( ( "GP_Sloc:trabajo_pr3.adb:53:13" (#"trabajo_pr3.adb" 53 0 0# ()) );
          ( "GP_Sloc:trabajo_pr3.adb:53:23" (#"trabajo_pr3.adb" 53 0 0# ()) );
          ( "GP_Sloc:trabajo_pr3.adb:53:20" (#"trabajo_pr3.adb" 53 0 0# #"trabajo_pr3.adb" 53 0 0# Trabajo_pr3__lower_case_counter__result.result__.int__content <- ( (#"trabajo_pr3.adb" 53 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:53:30" "GP_Id:14" "comment:            result := result + 1;
                             ^ trabajo_pr3.adb:53:30:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__if__result_assign__add" (Standard__integer.range_check_((Trabajo_pr3__lower_case_counter__result.result__.int__content + 1))) )) )) ) )) else (
          ()))) );
         ( "GP_Sloc:trabajo_pr3.adb:55:10" (#"trabajo_pr3.adb" 55 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:55:14" (#"trabajo_pr3.adb" 55 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:55:12" (#"trabajo_pr3.adb" 55 0 0# #"trabajo_pr3.adb" 55 0 0# Trabajo_pr3__lower_case_counter__i.i.int__content <- ( (#"trabajo_pr3.adb" 55 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:55:15" "GP_Id:17" "comment:         i :=i+1;
              ^ trabajo_pr3.adb:55:15:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__i_assign__add" (Standard__integer.range_check_((Trabajo_pr3__lower_case_counter__i.i.int__content + 1))) )) )) );
          abstract ensures {true}(let _ =  abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__i.i.int__content in (
          ()))
          end  in (
          ()))
          end ;
          check {  (#"trabajo_pr3.adb" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:trabajo_pr3.adb:56:10" "GP_Reason:VC_LOOP_VARIANT" "GP_Id:24" "comment:         pragma Loop_Variant(Increases => i);
         ^ trabajo_pr3.adb:56:10:VC_LOOP_VARIANT" "GP_Shape:L_3_while" (Trabajo_pr3__lower_case_counter__i.i.int__content > temp___214.int__content) )) } )
        done )))
       )))
      )
    with
     Trabajo_pr3__lower_case_counter__L_3.L_3 -> ()
    end)) )) );
   ( "GP_Sloc:trabajo_pr3.adb:62:14" (#"trabajo_pr3.adb" 62 0 0# ()) );
   ( "GP_Sloc:trabajo_pr3.adb:62:7" (#"trabajo_pr3.adb" 62 0 0# ( #"trabajo_pr3.adb" 62 0 0# trabajo_pr3__lower_case_counter__result.int__content <- ( Trabajo_pr3__lower_case_counter__result.result__.int__content );
   #"trabajo_pr3.adb" 62 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.orb((if (((  abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
   ()))
   end ;
  (Standard__string.length(Trabajo_pr3__lower_case_counter__str.str)) ) = 0)) then (
   (trabajo_pr3__lower_case_counter__result.int__content = 0)) else (
   (Boolean.of_int(1))))) ((if ((trabajo_pr3__lower_case_counter__result.int__content = 0)) then (
   ( (let i =  (any int
   ) in (
    (if ((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
     ()))
     end ;
    (Standard__string.first(Trabajo_pr3__lower_case_counter__str.str)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
     ()))
     end ;
    (Standard__string.last(Trabajo_pr3__lower_case_counter__str.str)) ))))) then (
      abstract ensures {true}(let _ = (Boolean.orb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__lower_case_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forall__or__cmp__ixdcomp" "GP_Sloc:trabajo_pr3.ads:48:27" "GP_Id:25" "comment:                     (Str(i) < 'a') or (Str(i) > 'z'))
                          ^ trabajo_pr3.ads:48:27:VC_INDEX_CHECK" ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) )) };
     i ))))) < 97)) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__lower_case_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forall__or__cmp__ixdcomp" "GP_Sloc:trabajo_pr3.ads:48:45" "GP_Id:26" "comment:                     (Str(i) < 'a') or (Str(i) > 'z'))
                                            ^ trabajo_pr3.ads:48:45:VC_INDEX_CHECK" ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) )) };
     i ))))) > 122))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:i" "model_trace:2964"  : int.
    ( ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__lower_case_counter__str.str) i)) < 97) \/ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__lower_case_counter__str.str) i)) > 122) ) )) )} 
   ) )) else (
   ( (let i =  (any int
   ) in (
    (if ((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
     ()))
     end ;
    (Standard__string.first(Trabajo_pr3__lower_case_counter__str.str)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Trabajo_pr3__lower_case_counter__str.str in (
     ()))
     end ;
    (Standard__string.last(Trabajo_pr3__lower_case_counter__str.str)) ))))) then (
      abstract ensures {true}(let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__lower_case_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 51 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forsome__and__cmp__ixdcomp" "GP_Sloc:trabajo_pr3.ads:51:25" "GP_Id:27" "comment:                   (Str(i) >= 'a') and (Str(i) <= 'z')));
                        ^ trabajo_pr3.ads:51:25:VC_INDEX_CHECK" ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) )) };
     i ))))) >= 97)) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__lower_case_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 51 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forsome__and__cmp__ixdcomp" "GP_Sloc:trabajo_pr3.ads:51:45" "GP_Id:28" "comment:                   (Str(i) >= 'a') and (Str(i) <= 'z')));
                                            ^ trabajo_pr3.ads:51:45:VC_INDEX_CHECK" ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) )) };
     i ))))) <= 122))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (exists i  : int.
    ( ( ((Standard__string.first Trabajo_pr3__lower_case_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__lower_case_counter__str.str)) ) /\ ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__lower_case_counter__str.str) i)) >= 97) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__lower_case_counter__str.str) i)) <= 122) ) )) )} 
   ) ))))) in (
   ()))
   end ;
  trabajo_pr3__lower_case_counter__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "string_c_counter" defined at trabajo_pr3.ads:55, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Trabajo_pr3__string_c_counter__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Trabajo_pr3__string_c_counter__str
 use        Trabajo_pr3__string_c_counter__result
 use        Trabajo_pr3__string_c_counter__L_4
 use        Trabajo_pr3__string_c_counter__L_4__T12b
 use        Trabajo_pr3__string_c_counter__L_4__i
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Trabajo_pr3__string_c_counter__result___axiom
 use        Trabajo_pr3__string_c_counter__L_4__i___axiom
 use        Trabajo_pr3__string_c_counter__L_4___axiom
 use        Trabajo_pr3__string_c_counter__str___axiom
 use        Trabajo_pr3__string_c_counter__L_4__T12b___axiom

 val trabajo_pr3__string_c_counter__result "model_projected" "model_trace:3008@result" "name:String_C_Counter"  : int__ref 
 
 let def #"trabajo_pr3.ads" 55 0 0#"W:diverges:N" "GP_Subp:trabajo_pr3.ads:55" 
   (__void_param : unit)
  requires { #"trabajo_pr3.ads" 55 0 0# true }
  ensures { #"trabajo_pr3.ads" 55 0 0# (#"trabajo_pr3.ads" 63 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__or" "GP_Sloc:trabajo_pr3.ads:63:17" "GP_Id:38" "comment:       Post =>  (if Str'Length = 0 then String_C_Counter'Result = 0)
                ^ trabajo_pr3.ads:63:17:VC_POSTCONDITION" ( "GP_Pretty_Ada:3388" "GP_Sloc:trabajo_pr3.ads:63:17" ( (if (((Standard__string.length Trabajo_pr3__string_c_counter__str.str) = 0)) then (
   (trabajo_pr3__string_c_counter__result.int__content = 0)) else (
   true)) \/ (if ((trabajo_pr3__string_c_counter__result.int__content = 0)) then (
   (forall i #"trabajo_pr3.ads" 63 0 0#  "model" "name:i" "model_trace:3067"  : int.
    ( ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__string_c_counter__str.str) i)) <> 48) ))) else (
   (exists i  : int.
    ( ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__string_c_counter__str.str) i)) = 48) )))) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram trabajo_pr3.ads:55 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Trabajo_pr3__string_c_counter__str.str True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram trabajo_pr3.ads:55 *)
  ;
  () (* Check for RTE in the Pre of the subprogram trabajo_pr3.ads:55 *)
  ;
   abstract ensures {true}(let _ = ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__str.str in (
    ()))
    end ;
   (Standard__string.first(Trabajo_pr3__string_c_counter__str.str)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__str.str in (
    ()))
    end ;
   (Standard__string.last(Trabajo_pr3__string_c_counter__str.str)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__string_c_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 61 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:trabajo_pr3.ads:61:22" "GP_Id:37" "comment:                 Str(J) = '0'),
                     ^ trabajo_pr3.ads:61:22:VC_INDEX_CHECK" "GP_Shape:pragargs__forsome__cmp__ixdcomp" ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= j) /\ (j <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) )) };
    j ))))) = 48) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (exists j  : int.
   ( ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= j) /\ (j <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__string_c_counter__str.str) j)) = 48) )) )} 
  ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram trabajo_pr3.ads:55 *)
  ;
   assume {  (exists j  : int.
   ( ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= j) /\ (j <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__string_c_counter__str.str) j)) = 48) )) };
   try
   ( (#"trabajo_pr3.adb" 67 0 0# ());
   (#"trabajo_pr3.adb" 71 0 0# ( #"trabajo_pr3.adb" 71 0 0# Trabajo_pr3__string_c_counter__result.result__.int__content <- ( 0 );
   #"trabajo_pr3.adb" 71 0 0# assume { #"trabajo_pr3.adb" 71 0 0# (Standard__integer___axiom.dynamic_invariant Trabajo_pr3__string_c_counter__result.result__.int__content True False True True) } ));
   (#"trabajo_pr3.adb" 73 0 0# ());
   ( "GP_Sloc:trabajo_pr3.adb:73:26" (#"trabajo_pr3.adb" 73 0 0# (let temp___216 = ( #"trabajo_pr3.adb" 73 0 0# abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__str.str in (
    ()))
    end ;
   (Standard__string.first(Trabajo_pr3__string_c_counter__str.str)) ) in (
   (let temp___217 = ( #"trabajo_pr3.adb" 73 0 0# abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__str.str in (
    ()))
    end ;
   (Standard__string.last(Trabajo_pr3__string_c_counter__str.str)) ) in (
    ( #"trabajo_pr3.adb" 73 0 0# Trabajo_pr3__string_c_counter__L_4__i.i.int__content <- ( temp___216 );
    () (* Translation of an Ada loop from trabajo_pr3.adb:73 *)
    ;
    (if ((Boolean.andb((temp___216 <= Trabajo_pr3__string_c_counter__L_4__i.i.int__content)) ((Trabajo_pr3__string_c_counter__L_4__i.i.int__content <= temp___217)))) then (
     #"trabajo_pr3.adb" 73 0 0# try
      ( #"trabajo_pr3.adb" 73 0 0# abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__L_4__i.i.int__content in (
       ()))
       end ;
      (let temp___219 = #"trabajo_pr3.adb" 73 0 0# (any int
      ensures {#"trabajo_pr3.adb" 73 0 0# (result = Trabajo_pr3__string_c_counter__L_4__i.i.int__content)} 
      ) in (
       ( #"trabajo_pr3.adb" 73 0 0# abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__result.result__.int__content in (
        ()))
        end ;
       (let temp___218 = #"trabajo_pr3.adb" 73 0 0# (any int
       ensures {#"trabajo_pr3.adb" 73 0 0# (result = Trabajo_pr3__string_c_counter__result.result__.int__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop trabajo_pr3.adb:73 *)
        ;
        ( "GP_Sloc:trabajo_pr3.adb:74:10" (#"trabajo_pr3.adb" 74 0 0# (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__string_c_counter__str.str))) (Trabajo_pr3__string_c_counter__L_4__i.i.int__content)))) = 48)) then (
         ( ( "GP_Sloc:trabajo_pr3.adb:75:20" (#"trabajo_pr3.adb" 75 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:75:13" (#"trabajo_pr3.adb" 75 0 0# ( #"trabajo_pr3.adb" 75 0 0# trabajo_pr3__string_c_counter__result.int__content <- ( Trabajo_pr3__string_c_counter__result.result__.int__content );
         #"trabajo_pr3.adb" 75 0 0# raise Return__exc )) ) )) else (
         ()))) );
        ( "GP_Sloc:trabajo_pr3.adb:77:10" (#"trabajo_pr3.adb" 77 0 0# ()) );
        ( "GP_Sloc:trabajo_pr3.adb:77:18" (#"trabajo_pr3.adb" 77 0 0# ()) );
        ( "GP_Sloc:trabajo_pr3.adb:77:16" (#"trabajo_pr3.adb" 77 0 0# #"trabajo_pr3.adb" 77 0 0# Trabajo_pr3__string_c_counter__result.result__.int__content <- ( (#"trabajo_pr3.adb" 77 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:77:24" "GP_Id:31" "comment:         result:=result+1;
                       ^ trabajo_pr3.adb:77:24:VC_OVERFLOW_CHECK" "GP_Shape:L_4_while__result_assign__add" (Standard__integer.range_check_((Trabajo_pr3__string_c_counter__result.result__.int__content + 1))) )) )) );
        () (* While loop translating the Ada loop from trabajo_pr3.adb:73 *)
        ;
         while True do
         invariant { 
          (#"trabajo_pr3.adb" 78 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:trabajo_pr3.adb:78:32" "GP_Id:32" "comment:         pragma Loop_Invariant(result <= i);
                               ^ trabajo_pr3.adb:78:32:VC_LOOP_INVARIANT" "GP_Shape:L_4_while__pragargs__cmp" ( "GP_Pretty_Ada:2652" "GP_Sloc:trabajo_pr3.adb:78:32" (Trabajo_pr3__string_c_counter__result.result__.int__content <= Trabajo_pr3__string_c_counter__L_4__i.i.int__content) ) ))
          }
         invariant { 
          (#"trabajo_pr3.adb" 79 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:trabajo_pr3.adb:79:32" "GP_Id:34" "comment:         pragma Loop_Invariant(for all k in Str'First..I =>
                               ^ trabajo_pr3.adb:79:32:VC_LOOP_INVARIANT" "GP_Shape:L_4_while__pragargs__forall" (forall k #"trabajo_pr3.adb" 79 0 0#  "model" "model_trace:2657" "name:k"  : int.
           ( ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= k) /\ (k <= Trabajo_pr3__string_c_counter__L_4__i.i.int__content) ) -> ( "GP_Pretty_Ada:2674" "GP_Sloc:trabajo_pr3.adb:80:34" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__string_c_counter__str.str) k)) <> 48) ) )) ))
          }
         ( () (* Assume implicit invariants from the loop trabajo_pr3.adb:73 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Trabajo_pr3__string_c_counter__result.result__.int__content False True True True) ) /\ true ) /\ (if (((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str))) then (
          (Trabajo_pr3__string_c_counter__L_4__T12b.dynamic_property (Standard__string.first Trabajo_pr3__string_c_counter__str.str) (Standard__string.last Trabajo_pr3__string_c_counter__str.str) Trabajo_pr3__string_c_counter__L_4__i.i.int__content)) else true) ) /\ true )) (( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= Trabajo_pr3__string_c_counter__L_4__i.i.int__content) /\ (Trabajo_pr3__string_c_counter__L_4__i.i.int__content <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ))) };
         () (* Check for absence of RTE in the invariant of loop trabajo_pr3.adb:73 *)
         ;
          abstract ensures {true}(let _ = (Trabajo_pr3__string_c_counter__result.result__.int__content <= Trabajo_pr3__string_c_counter__L_4__i.i.int__content) in (
          ()))
          end ;
          abstract ensures {true}(let _ = ( (let k =  (any int
         ) in (
          (if ((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__str.str in (
           ()))
           end ;
          (Standard__string.first(Trabajo_pr3__string_c_counter__str.str)) ) <= k)) ((k <= Trabajo_pr3__string_c_counter__L_4__i.i.int__content)))) then (
            abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__string_c_counter__str.str))) ((  assert {  (#"trabajo_pr3.adb" 80 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:trabajo_pr3.adb:80:38" "GP_Id:33" "comment:                                 Str(k) /='0');
                                     ^ trabajo_pr3.adb:80:38:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= k) /\ (k <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) )) };
           k ))))) <> 48) in (
            ()))
            end ))))
         ;
          (any bool
         requires { true} 
         ensures { ( (result = True) <-> (forall k   "model" "model_trace:2657" "name:k"  : int.
          ( ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= k) /\ (k <= Trabajo_pr3__string_c_counter__L_4__i.i.int__content) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__string_c_counter__str.str) k)) <> 48) )) )} 
         ) ) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop trabajo_pr3.adb:73 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop trabajo_pr3.adb:73 *)
         ;
         (if ((Trabajo_pr3__string_c_counter__L_4__i.i.int__content = temp___217)) then (
           raise Trabajo_pr3__string_c_counter__L_4.L_4));
          Trabajo_pr3__string_c_counter__L_4__i.i.int__content <- ( (Trabajo_pr3__string_c_counter__L_4__i.i.int__content + 1) );
         ( "GP_Sloc:trabajo_pr3.adb:74:10" (#"trabajo_pr3.adb" 74 0 0# (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__string_c_counter__str.str))) (Trabajo_pr3__string_c_counter__L_4__i.i.int__content)))) = 48)) then (
          ( ( "GP_Sloc:trabajo_pr3.adb:75:20" (#"trabajo_pr3.adb" 75 0 0# ()) );
          ( "GP_Sloc:trabajo_pr3.adb:75:13" (#"trabajo_pr3.adb" 75 0 0# ( #"trabajo_pr3.adb" 75 0 0# trabajo_pr3__string_c_counter__result.int__content <- ( Trabajo_pr3__string_c_counter__result.result__.int__content );
          #"trabajo_pr3.adb" 75 0 0# raise Return__exc )) ) )) else (
          ()))) );
         ( "GP_Sloc:trabajo_pr3.adb:77:10" (#"trabajo_pr3.adb" 77 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:77:18" (#"trabajo_pr3.adb" 77 0 0# ()) );
         ( "GP_Sloc:trabajo_pr3.adb:77:16" (#"trabajo_pr3.adb" 77 0 0# #"trabajo_pr3.adb" 77 0 0# Trabajo_pr3__string_c_counter__result.result__.int__content <- ( (#"trabajo_pr3.adb" 77 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:trabajo_pr3.adb:77:24" "GP_Id:31" "comment:         result:=result+1;
                       ^ trabajo_pr3.adb:77:24:VC_OVERFLOW_CHECK" "GP_Shape:L_4_while__result_assign__add" (Standard__integer.range_check_((Trabajo_pr3__string_c_counter__result.result__.int__content + 1))) )) )) ) )
        done )))
        )))
       )
     with
      Trabajo_pr3__string_c_counter__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:trabajo_pr3.adb:82:14" (#"trabajo_pr3.adb" 82 0 0# ()) );
   ( "GP_Sloc:trabajo_pr3.adb:82:7" (#"trabajo_pr3.adb" 82 0 0# ( #"trabajo_pr3.adb" 82 0 0# trabajo_pr3__string_c_counter__result.int__content <- ( Trabajo_pr3__string_c_counter__result.result__.int__content );
   #"trabajo_pr3.adb" 82 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.orb((if (((  abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__str.str in (
   ()))
   end ;
  (Standard__string.length(Trabajo_pr3__string_c_counter__str.str)) ) = 0)) then (
   (trabajo_pr3__string_c_counter__result.int__content = 0)) else (
   (Boolean.of_int(1))))) ((if ((trabajo_pr3__string_c_counter__result.int__content = 0)) then (
   ( (let i =  (any int
   ) in (
    (if ((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__str.str in (
     ()))
     end ;
    (Standard__string.first(Trabajo_pr3__string_c_counter__str.str)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__str.str in (
     ()))
     end ;
    (Standard__string.last(Trabajo_pr3__string_c_counter__str.str)) ))))) then (
      abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__string_c_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 66 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forall__cmp__ixdcomp" "GP_Sloc:trabajo_pr3.ads:66:32" "GP_Id:35" "comment:                          Str (i) /= '0')
                               ^ trabajo_pr3.ads:66:32:VC_INDEX_CHECK" ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) )) };
     i ))))) <> 48) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:i" "model_trace:3067"  : int.
    ( ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__string_c_counter__str.str) i)) <> 48) )) )} 
   ) )) else (
   ( (let i =  (any int
   ) in (
    (if ((Boolean.andb(((  abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__str.str in (
     ()))
     end ;
    (Standard__string.first(Trabajo_pr3__string_c_counter__str.str)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Trabajo_pr3__string_c_counter__str.str in (
     ()))
     end ;
    (Standard__string.last(Trabajo_pr3__string_c_counter__str.str)) ))))) then (
      abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Trabajo_pr3__string_c_counter__str.str))) ((  assert {  (#"trabajo_pr3.ads" 69 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__or__if__forsome__cmp__ixdcomp" "GP_Sloc:trabajo_pr3.ads:69:32" "GP_Id:36" "comment:                          Str (i) = '0'));
                               ^ trabajo_pr3.ads:69:32:VC_INDEX_CHECK" ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) )) };
     i ))))) = 48) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (exists i  : int.
    ( ( ((Standard__string.first Trabajo_pr3__string_c_counter__str.str) <= i) /\ (i <= (Standard__string.last Trabajo_pr3__string_c_counter__str.str)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Trabajo_pr3__string_c_counter__str.str) i)) = 48) )) )} 
   ) ))))) in (
   ()))
   end ;
  trabajo_pr3__string_c_counter__result.int__content )
end
